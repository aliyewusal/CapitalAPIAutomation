{
	"info": {
		"_postman_id": "0bf02ab0-926f-4565-addd-53ec9aeb342f",
		"name": "Capital-com",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "747b97df-c622-49cb-b60f-2afeee40f92b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a13de72-9cbd-4303-9313-6884d9ef7a20",
						"exec": [
							"// Extract the x-api-token from the response and set it as a global variable",
							"pm.globals.set(\"token\", pm.response.json()[\"x-api-token\"]);",
							"",
							"// Test cases",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response schema is valid\", function () {",
							"    const schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            \"x-api-token\": { type: \"string\" }",
							"        },",
							"        required: [\"x-api-token\"],",
							"    };",
							"    ",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"The x-api-token length must be greater than zero\", function () {",
							"    const apiToken = pm.globals.get(\"token\");",
							"    pm.expect(apiToken.length).to.be.greaterThan(0, \"x-api-token should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f5e83929-c605-46f7-93d3-a04b4d5e7a36",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"username\": \"{{testUserName}}\",\n\"password\": \"{{testPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/login"
			},
			"response": []
		},
		{
			"name": "Login With Wrong Creds",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "747b97df-c622-49cb-b60f-2afeee40f92b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a13de72-9cbd-4303-9313-6884d9ef7a20",
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"User does not exist or wrong password\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "fcc2cd7c-fc78-4a0d-888c-9f975ae0e78c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"username\": \"something\",\n\"password\": \"anything\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/login"
			},
			"response": []
		},
		{
			"name": "Get User Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57c5060a-b510-4e09-bf90-eabdd6002f8a",
						"exec": [
							"const responseJSON = pm.response.json();",
							"",
							"// Set global variables for each account",
							"responseJSON.accounts.forEach(function(account) {",
							"    pm.globals.set(account.currency + \" account\", account.id);",
							"});",
							"",
							"// Test response status code",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// Test email format",
							"pm.test(\"Email is in a valid format\", function () {",
							"  pm.expect(responseJSON.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");",
							"});",
							"",
							"// Test mobile phone number format",
							"pm.test(\"Mobile phone number is in a valid format\", function () {",
							"  pm.expect(responseJSON.mobile_phone).to.match(/^\\+\\d{2}-\\d{3}-\\d{3}-\\d{2}$/);",
							"});",
							"",
							"// Test the presence of 'accounts' array in the response",
							"pm.test(\"Verify that the 'accounts' array is present in the response\", function () {",
							"  pm.expect(responseJSON.accounts).to.exist.and.to.be.an('array');",
							"});",
							"",
							"// Test the expected number of elements in 'accounts' array",
							"pm.test(\"Verify that the 'accounts' array contains the expected number of elements\", function () {",
							"  pm.expect(responseJSON.accounts.length).to.equal(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "dac950d1-df9e-48c9-8e4d-ea83687dda04",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/me"
			},
			"response": []
		},
		{
			"name": "Get User Details With Wrong Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57c5060a-b510-4e09-bf90-eabdd6002f8a",
						"exec": [
							"const responseJSON = pm.response.json();",
							"",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).not.eql(\"User does not exist or wrong password\");",
							"});",
							"// Test response status code",
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5c1c22fa-af10-4f9d-b945-913b0f18e7a7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-token",
						"value": "0977df3e-3e2b-4613-98c4-ea3fcfdddb99",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/me"
			},
			"response": []
		},
		{
			"name": "Get User Details Without Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "884f491f-1e0c-4042-8198-36b1f401abb5",
						"exec": [
							"const responseJSON = pm.response.json();",
							"",
							"",
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cf0e2f01-b6f5-4509-9b3c-833fdff53782",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/me"
			},
			"response": []
		},
		{
			"name": "Get EUR Account Transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "243c6b91-8520-4480-9c63-be35eda83c72",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Validate that the 'id' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(transaction) {",
							"        pm.expect(transaction.id).to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"pm.test(\"Validate that the 'created_on' is in a valid date format and represents a valid date\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(transaction) {",
							"        pm.expect(transaction.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}$/);",
							"        pm.expect(new Date(transaction.created_on)).to.not.eql('Invalid Date');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Amount is a non-negative number\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(transaction) {",
							"    pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c5c73845-2202-4bca-9737-952671541da2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/accounts/{{EUR account}}/transactions"
			},
			"response": []
		},
		{
			"name": "Get USD Account Transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9a24a7d-01ad-40b5-9678-3cdfdf2e5e98",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'id' is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(transaction){",
							"        pm.expect(transaction.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that created_on is a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    responseData.forEach(function(transaction) {",
							"        pm.expect(transaction.created_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'amount' is a number\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  responseData.forEach(function(transaction) {",
							"    pm.expect(transaction.amount).to.be.a('number');",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "736e41d2-6143-4ff4-b9d7-878a8124206e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/accounts/{{USD account}}/transactions"
			},
			"response": []
		},
		{
			"name": "Get GBP Account Transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b314ed38-22e1-421a-8440-3d777e323595",
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Amount is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(transaction) {",
							"        pm.expect(transaction.amount).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Currency is a valid currency code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(transaction) {",
							"        pm.expect(transaction.currency).to.match(/^[A-Z]{3}$/);",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f1075751-62a2-4665-abac-5f7d8382337c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/accounts/{{GBP account}}/transactions"
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Result is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.result).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "979cc097-ca4e-4930-927d-6f107d6fc2e5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"username\": \"pawel.kur\",\n\"password\": \"P!ms*4P,@7E&a\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/logout"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "11b4f30e-6a9e-4f17-81b5-77c68790cf51",
				"type": "text/javascript",
				"exec": [
					"// const querystring = require ('querystring')",
					"",
					"// const params = {",
					"//             \"username\": \"pawel.kur\",",
					"//             \"password\": \"P!ms*4P,@7E&a\"",
					"// }",
					"",
					"// const postAuth = {",
					"//     method: 'POST',",
					"//     url: 'http://164.92.199.221/login',",
					"//     header: {",
					"//         'Content-Type': 'application/json'",
					"//     },",
					"//     body: querystring.stringify(params)",
					"// }",
					"",
					"// pm.sendRequest(postAuth, (error, response) => {",
					"//     // console.log(error ? error : response.json().access_token)",
					"// // pm.globals.set(\"variable_key\", \"variable_value\");",
					"//     let token = response.json().x-api-token",
					"//     pm.globals.set('ACCESS_TOKEN', token)",
					"// })"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f1ec6763-91d1-4790-93a9-00c29041add1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}